{"version":3,"sources":["pages/uploadImage.js","pages/imagesPage.js","pages/tagCloudPage.js","pages/allUploadedImages.js","App.js","serviceWorker.js","index.js"],"names":["UploadImagePage","state","images","tags","waiting","id","fetch","method","then","body","json","data","setTimeout","updateTags","bind","split","setState","pictures","FormData","this","forEach","picture","append","name","console","log","label","length","join","spinner","size","color","loading","className","withIcon","buttonText","onChange","onDrop","imgExtension","maxFileSize","withPreview","singleImage","Component","ImagesPage","props","image","tagStrings","t","push","value","title","src","s3_path","thumbnail","caption","sort","a","b","Math","random","TagCloudPage","tagWeights","maxCount","selectedTag","tag","undefined","onClick","showCloud","Object","keys","fontSize","key","style","showImages","fontFamily","height","padding","AllUploadedImages","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8f49d370.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport ClipLoader from \"react-spinners/ClipLoader\";\nimport ImageUploader from 'react-images-upload';\n\n\nclass UploadImagePage extends Component {\n\n    state = {\n        images: [],\n        tags: [],\n        waiting: false,\n    }\n\n    updateTags(id) {\n        fetch(`/api/v0/image/${id}`, { method: 'GET'})\n        .then(body => body.json())\n        .then(data => {\n            if(data.tags === \"\"){\n                setTimeout(this.updateTags.bind(this), 1000, id)\n            } else {\n                let state = this.state;\n                state.tags = data.tags.split(\",\")\n                state.waiting = false\n                this.setState(state)\n            }\n        })\n    }\n\n    onDrop(pictures) {\n        const data = new FormData();\n\n        let state = this.state;\n        state.images = []\n        state.tags = []\n        state.waiting = true\n        this.setState(state)\n\n        pictures.forEach(picture => {\n            data.append('file', picture);\n            data.append('filename', picture.name);\n        })\n\n        fetch(\"/api/v0/image\", { method: 'POST', body: data })\n        .then(body => body.json())\n        .then(data => {\n            console.log(data)\n            let state = this.state;\n            state.images = pictures\n            this.setState(state)\n            this.updateTags(data.id)\n        });\n    }\n\n    render() {\n        let label = \"\"\n        if(this.state.tags.length > 0){\n            label = this.state.tags.join(\", \")\n        }\n\n        let spinner = \"\"\n        if (this.state.waiting){\n            spinner = <ClipLoader\n              size={50}\n              color={\"#123abc\"}\n              loading={this.state.loading}\n            />\n        }\n\n        let tag_cloud = \"\";\n\n        return <div className=\"App\">\n            <br/>\n            <b>all images given to this site are saved and publicly available. Please use discretion</b>\n            <h1>{label}</h1>\n            {spinner}\n            <ImageUploader\n                withIcon={true}\n                buttonText='Choose image'\n                onChange={this.onDrop.bind(this)}\n                imgExtension={['.jpg', '.gif', '.png', '.gif', '.jpeg']}\n                maxFileSize={5242880}\n                withPreview={true}\n                singleImage={true}\n            />\n            {tag_cloud}\n        </div>\n    }\n}\n\n\nexport default UploadImagePage;\n","import React, {Component} from 'react';\nimport Gallery from 'react-grid-gallery';\n\n\nclass ImagesPage extends Component {\n    render() {\n        let images = []\n        this.props.images.forEach(image => {\n            let tagStrings = image.tags.split(\",\")\n            let tags = []\n            tagStrings.forEach(t => {\n                tags.push({value:t, title:t})\n            })\n\n            images.push({\n                src: image.s3_path,\n                thumbnail: image.s3_path,\n                tags: tags,\n                caption: image.id\n            })\n        })\n        images.sort(function (a, b) { return 0.5 - Math.random() })\n        return <Gallery images={images}/>\n    }\n}\n\nexport default ImagesPage;","import React, {Component} from 'react';\nimport TagCloud from \"react-tag-cloud\";\nimport ImagesPage from \"./imagesPage\";\n\nclass TagCloudPage extends Component {\n    state = {\n        tagWeights: {},\n        maxCount: 0,\n        images: {},\n        selectedTag: null,\n    }\n\n    constructor(props) {\n        super(props);\n        fetch(`https://www.whatisthisapictureof.com/api/v0/images`, {method: 'GET'})\n            .then(body => body.json())\n            .then(data => {\n                let state = this.state;\n                state.maxCount = 0\n                state.images = {}\n                data.images.forEach(image => {\n                    let tags = image.tags.split(\",\")\n                    tags.forEach(tag => {\n                        if(state.tagWeights[tag] === undefined){\n                            state.tagWeights[tag] = 0\n                        }\n                        state.tagWeights[tag] += 1\n\n                        if(state.images[tag] === undefined){\n                            state.images[tag] = []\n                        }\n                        state.images[tag].push(image)\n\n                        if(state.tagWeights[tag] > state.maxCount) {\n                            state.maxCount = state.tagWeights[tag]\n                        }\n\n                    })\n                })\n                this.setState(state)\n            })\n    }\n\n    showImages(tag) {\n        let state = this.state\n        state.selectedTag = tag\n        this.setState(state)\n    }\n\n    showCloud() {\n        let state = this.state\n        state.selectedTag = null\n        this.setState(state)\n\n    }\n\n    render() {\n        if(this.state.selectedTag !== null){\n            return <>\n                <button onClick={this.showCloud.bind(this)}>back</button>\n                <ImagesPage images={this.state.images[this.state.selectedTag]} />\n            </>\n        }\n\n        let tags = []\n        Object.keys(this.state.tagWeights).forEach(tag => {\n            let weight = this.state.tagWeights[tag]\n            let fontSize = 50*weight/this.state.maxCount+10\n            tags.push(<div key={tag} style={{fontSize: fontSize}}>\n                <a onClick={() => {this.showImages(tag)}}>\n                    {tag}\n                </a>\n            </div>)\n        })\n        return <TagCloud\n            className=\"tag-cloud\"\n            style={{\n                fontFamily: \"sans-serif\",\n                fontSize: 30,\n                height: \"500px\",\n                padding: 5\n            }}\n        >\n            {tags}\n        </TagCloud>\n    }\n}\n\nexport default TagCloudPage;","import React, {Component} from 'react';\nimport ImagesPage from \"./imagesPage\";\n\n\nclass AllUploadedImages extends Component {\n    state = {\n        images: [],\n    }\n\n    constructor(props) {\n        super(props);\n        fetch(`https://www.whatisthisapictureof.com/api/v0/images`, {method: 'GET'})\n            .then(body => body.json())\n            .then(data => {\n                let state = this.state;\n                state.images = data.images\n                this.setState(state)\n            })\n    }\n\n    render() {\n        return <ImagesPage images={this.state.images} />\n    }\n}\n\nexport default AllUploadedImages;","import React, {Component} from 'react';\nimport './App.css';\nimport 'react-tabs/style/react-tabs.css';\nimport {Tab,TabList, Tabs, TabPanel} from \"react-tabs\";\nimport UploadImagePage from \"./pages/uploadImage\";\nimport TagCloudPage from \"./pages/tagCloudPage\";\nimport AllUploadedImages from \"./pages/allUploadedImages\";\n\n\nclass App extends Component {\n    render(){\n        return <Tabs>\n            <TabList>\n                <Tab>Upload Image</Tab>\n                <Tab>Tag Cloud</Tab>\n                <Tab>All Uploaded Images</Tab>\n            </TabList>\n\n            <TabPanel>\n                <UploadImagePage/>\n            </TabPanel>\n\n            <TabPanel>\n                <TagCloudPage/>\n            </TabPanel>\n\n            <TabPanel>\n                <AllUploadedImages/>\n            </TabPanel>\n\n         </Tabs>\n     }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}