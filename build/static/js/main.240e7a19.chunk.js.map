{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","images","tags","waiting","id","fetch","method","then","body","json","data","setTimeout","updateTags","bind","split","setState","pictures","FormData","this","forEach","picture","append","name","console","log","label","length","join","spinner","size","color","loading","className","withIcon","buttonText","onChange","onDrop","imgExtension","maxFileSize","withPreview","singleImage","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"2SA4FeA,E,4MAlFXC,MAAQ,CACJC,OAAQ,GACRC,KAAM,GACNC,SAAS,G,yDAGFC,GAAK,IAAD,OACXC,MAAM,iBAAD,OAAkBD,GAAM,CAAEE,OAAQ,QACtCC,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAG,GACF,GAAiB,KAAdA,EAAKR,KACJS,WAAW,EAAKC,WAAWC,KAAK,GAAO,IAAMT,OAC1C,CACH,IAAIJ,EAAQ,EAAKA,MACjBA,EAAME,KAAOQ,EAAKR,KAAKY,MAAM,KAC7Bd,EAAMG,SAAU,EAChB,EAAKY,SAASf,S,6BAKnBgB,GAAW,IAAD,OACPN,EAAO,IAAIO,SAEbjB,EAAQkB,KAAKlB,MACjBA,EAAMC,OAAS,GACfD,EAAME,KAAO,GACbF,EAAMG,SAAU,EAChBe,KAAKH,SAASf,GAEdgB,EAASG,SAAQ,SAAAC,GACbV,EAAKW,OAAO,OAAQD,GACpBV,EAAKW,OAAO,WAAYD,EAAQE,SAGpCjB,MAAM,gBAAiB,CAAEC,OAAQ,OAAQE,KAAME,IAC9CH,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAG,GACFa,QAAQC,IAAId,GACZ,IAAIV,EAAQ,EAAKA,MACjBA,EAAMC,OAASe,EACf,EAAKD,SAASf,GACd,EAAKY,WAAWF,EAAKN,S,+BAKzB,IAAIqB,EAAQ,GACTP,KAAKlB,MAAME,KAAKwB,OAAS,IACxBD,EAAQP,KAAKlB,MAAME,KAAKyB,KAAK,OAGjC,IAAIC,EAAU,GACVV,KAAKlB,MAAMG,UACXyB,EAAU,kBAAC,IAAD,CACRC,KAAM,GACNC,MAAO,UACPC,QAASb,KAAKlB,MAAM+B,WAM1B,OAAO,yBAAKC,UAAU,OAClB,6BACA,oHACA,4BAAKP,GACJG,EACD,kBAAC,IAAD,CACIK,UAAU,EACVC,WAAW,eACXC,SAAUjB,KAAKkB,OAAOvB,KAAKK,MAC3BmB,aAAc,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,SAC/CC,YAAa,QACbC,aAAa,EACbC,aAAa,IAdL,Q,GA/DNC,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/C,MAAK,SAAAgD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnC,QAAQmC,MAAMA,EAAMC,c","file":"static/js/main.240e7a19.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './App.css';\nimport ClipLoader from \"react-spinners/ClipLoader\";\nimport TagCloud from 'react-tag-cloud';\nimport ImageUploader from 'react-images-upload';\n\n\n\nclass App extends Component {\n\n    state = {\n        images: [],\n        tags: [],\n        waiting: false,\n    }\n\n    updateTags(id) {\n        fetch(`/api/v0/image/${id}`, { method: 'GET'})\n        .then(body => body.json())\n        .then(data => {\n            if(data.tags === \"\"){\n                setTimeout(this.updateTags.bind(this), 1000, id)\n            } else {\n                let state = this.state;\n                state.tags = data.tags.split(\",\")\n                state.waiting = false\n                this.setState(state)\n            }\n        })\n    }\n\n    onDrop(pictures) {\n        const data = new FormData();\n\n        let state = this.state;\n        state.images = []\n        state.tags = []\n        state.waiting = true\n        this.setState(state)\n\n        pictures.forEach(picture => {\n            data.append('file', picture);\n            data.append('filename', picture.name);\n        })\n\n        fetch(\"/api/v0/image\", { method: 'POST', body: data })\n        .then(body => body.json())\n        .then(data => {\n            console.log(data)\n            let state = this.state;\n            state.images = pictures\n            this.setState(state)\n            this.updateTags(data.id)\n        });\n    }\n\n    render() {\n        let label = \"\"\n        if(this.state.tags.length > 0){\n            label = this.state.tags.join(\", \")\n        }\n\n        let spinner = \"\"\n        if (this.state.waiting){\n            spinner = <ClipLoader\n              size={50}\n              color={\"#123abc\"}\n              loading={this.state.loading}\n            />\n        }\n\n        let tag_cloud = \"\";\n\n        return <div className=\"App\">\n            <br/>\n            <b>all images given to this site are saved and publicly available. Please use discretion</b>\n            <h1>{label}</h1>\n            {spinner}\n            <ImageUploader\n                withIcon={true}\n                buttonText='Choose image'\n                onChange={this.onDrop.bind(this)}\n                imgExtension={['.jpg', '.gif', '.png', '.gif', '.jpeg']}\n                maxFileSize={5242880}\n                withPreview={true}\n                singleImage={true}\n            />\n            {tag_cloud}\n        </div>\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}